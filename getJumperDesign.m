gravity = 9.81;
airDensity = 1.225;

numberOfElements = 50;

youngsModulus = 131e9;
springDensity = 1500;

massHinge = .020;

numberOfSprings = 4;
springWidth = .310 * .0254;
springThickness = .032 * .0254;

dragCoefficient = 1.2;
dragMassPerArea = 0.07609;  % styrofoam sheet, 4.75mm thick

numberOfRobots = 5;
specificDrags = logspace(-2, 2, numberOfRobots)';
springCompression = .23;

springArea = springWidth * springThickness;

jumpPerformances = zeros(length(specificDrags), 1);
dragAreas = zeros(length(specificDrags), 1);
springLengths = zeros(length(specificDrags), 1);
velocity = zeros(length(specificDrags), 1);
velocity_LB = zeros(length(specificDrags), 1);
velocity_UB = zeros(length(specificDrags), 1);
jumpHeight = zeros(length(specificDrags), 1);
totalMass = zeros(length(specificDrags), 1);

desiredVelocity = 6.6;
desiredVelocityMargin = 0.1;

MASS_PAYLOAD = 0.030;

syms DRAG_AREA positive
syms SPRING_LENGTH positive

for i = 1:length(specificDrags)
    
    springMass = @(spring_length) springDensity * numberOfSprings * ...
        spring_length * springArea;
    
    springEnergy = @(spring_length) ...
        numberOfSprings * jumperEnergy(spring_length, ...
                                       springCompression * spring_length, ...
                                       springWidth, ...
                                       springThickness, ...
                                       numberOfSprings, ...
                                       numberOfElements, ...
                                       youngsModulus);

    specificDragEquation = @(mass_payload, drag_area, spring_length) ...
        jumperSpecificDrag(mass_payload, ...
                           drag_area, ...
                           springEnergy(spring_length), ...
                           springMass(spring_length), ...
                           dragMassPerArea, ...
                           dragCoefficient, ...
                           massHinge, ...
                           airDensity, ...
                           gravity);

    
    velocityEquation = @(mass_payload, drag_area, spring_length) ...
        velocityFunction(mass_payload, ...
                         drag_area, ...
                         totalEnergy, ...
                         springMass, ...
                         dragMassPerArea, ...
                         numberOfSprings, ...
                         massHinge, ...
                         dragCoefficient, ...
                         gravity, ...
                         airDensity);

    potentialSolution = ...
        fsolve([ specificDrags(i) == specificDragEquation(MASS_PAYLOAD, ...
                                                      DRAG_AREA, ...
                                                      SPRING_LENGTH), ...
                desiredVelocity == velocityEquation(MASS_PAYLOAD, ...
                                                    DRAG_AREA, ...
                                                    SPRING_LENGTH) ], ...
              [ DRAG_AREA , SPRING_LENGTH ]);    
    
    if (length(potentialSolution.DRAG_AREA) > 0 && ...
        length(potentialSolution.SPRING_LENGTH) > 0)
        dragAreas(i) = real(double(potentialSolution.DRAG_AREA));
        dragRadii(i) = sqrt(dragAreas(i) / pi);
        springLengths(i) = real(double(potentialSolution.SPRING_LENGTH));
        jumpPerformances(i) = 2 / specificDrags(i) * ...
            log(1 + 0.5*specificDrags(i));
        
        totalMass(i) = MASS_PAYLOAD + ...
            massHinge + ...
            springMass(springLengths(i)) + ...
            dragMassPerArea * dragAreas(i);

        
        [ velocity(i), velocity_LB(i), velocity_UB(i) ] = ...
            velocityError(massPayloads(i), massPayloads(i)*.01, ...
                          springLength, springLength*.01, ...
                          dragRadii(i), dragRadii(i)*.01, ...
                          specificDrags(i), dragMassPerArea, ...
                          springArea, springDensity, ...
                          dragCoefficient, airDensity, gravity);
        
        [ ~, ~, jumpHeight(i) ] = ...
            jumperJumpHeight(gravity, airDensity, dragCoefficient, ...
                             dragAreas(i), efficiency, ...
                             totalEnergy, totalMass(i));
        
    end
end
dragRadii = sqrt(dragAreas / pi);

designTable = table(specificDrags, dragRadii, velocity, jumpHeight, ...
                    massPayloads);
designTable.Properties.Description = sprintf([ 'Design parameters for ' ...
                    'a bow jumper with %i %fx%fx%f carbon-fiber bow ' ...
                    'springs and a payload mass of %f' ], ...
                                             numberOfSprings, ...
                                             springThickness, ...
                                             springWidth, ...
                                             springLength, ...
                                             massPayload);
designTable.Properties.VariableUnits = {'', 'm', 'm/s', 'm', 'kg'};

display(designTable);
