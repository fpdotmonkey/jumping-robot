

gravity = 9.81;
airDensity = 1.225;

numberOfElements = 50;

youngsModulus = 131e9;
springDensity = 1500;

massHinge = .020;

numberOfSprings = 4;
springWidth = .0047752;
springThickness = .0004826;

dragCoefficient = 1.4;
dragMassPerArea = .0103;  % CF reinforced epoxy, .77mm thick

numberOfRobots = 5;
specificDrags = logspace(-2, 2, numberOfRobots)';
springLength = 0.25;
springCompressedLength = .23 * springLength;
%massPayload = 0.000;

springArea = springWidth * springThickness;
massOneSpring = springDensity * springLength * springArea;
massTotalSpring = numberOfSprings * massOneSpring;

[ ~, energyOneSpring ] = jumperDeflection(numberOfElements, youngsModulus, ...
                                          springWidth, springThickness, ...
                                          springLength, ...
                                          springCompressedLength, ...
                                          numberOfSprings);

totalEnergy = numberOfSprings * energyOneSpring;

desiredVelocity = 10.0;
desiredVelocityMargin = 10.0;

jumpPerformances = zeros(length(specificDrags), 1);
dragAreas = zeros(length(specificDrags), 1);
massPayloads = zeros(length(specificDrags), 1);
velocity = zeros(length(specificDrags), 1);
velocity_LB = zeros(length(specificDrags), 1);
velocity_UB = zeros(length(specificDrags), 1);
jumpHeight = zeros(length(specificDrags), 1);
totalMass = zeros(length(specificDrags), 1);

syms MASS_PAYLOAD positive
syms DRAG_AREA positive

for i = 1:length(specificDrags)
    potentialSolution = ...
        solve([ specificDrags(i) == ...
                2*(dragCoefficient * airDensity * DRAG_AREA * ...
                     (MASS_PAYLOAD + DRAG_AREA * dragMassPerArea + ...
                      .5*(massTotalSpring + massHinge)) * totalEnergy) / ...
                ((MASS_PAYLOAD + DRAG_AREA * dragMassPerArea + ...
                  massTotalSpring + massHinge)^3 * gravity), ...
                abs(desiredVelocity - ...
                    velocityFunction(MASS_PAYLOAD, DRAG_AREA, ...
                                     gravity, airDensity, dragCoefficient, ...
                                     totalEnergy, dragMassPerArea, ...
                                     massHinge, massOneSpring, ...
                                     numberOfSprings)) < ...
                desiredVelocityMargin ], ...
              [ MASS_PAYLOAD, DRAG_AREA ]);    
    
    if (length(potentialSolution.MASS_PAYLOAD) > 0 && ...
        length(potentialSolution.DRAG_AREA) > 0)
        dragAreas(i) = real(double(potentialSolution.DRAG_AREA));
        massPayloads(i) = real(double(potentialSolution.MASS_PAYLOAD));
        dragRadii(i) = sqrt(dragAreas(i) / pi);
        jumpPerformances(i) = 2 / specificDrags(i) * ...
            log(1 + 0.5*specificDrags(i));
        
        totalMass(i) = massPayloads(i) + massHinge + massTotalSpring + ...
            dragMassPerArea * dragAreas(i);

        
        [ velocity(i), velocity_LB(i), velocity_UB(i) ] = ...
            velocityError(massPayloads(i), massPayloads(i)*.01, ...
                          springLength, springLength*.01, ...
                          dragRadii(i), dragRadii(i)*.01, ...
                          specificDrags(i), dragMassPerArea, ...
                          springArea, springDensity, ...
                          dragCoefficient, airDensity, gravity);
        
        [ ~, ~, jumpHeight(i) ] = ...
            jumperJumpHeight(gravity, airDensity, dragCoefficient, ...
                             dragAreas(i), efficiency, ...
                             totalEnergy, totalMass(i));
        
    end
end
dragRadii = sqrt(dragAreas / pi);

designTable = table(specificDrags, dragRadii, velocity, jumpHeight, ...
                    massPayloads);
designTable.Properties.Description = sprintf([ 'Design parameters for ' ...
                    'a bow jumper with %i %fx%fx%f carbon-fiber bow ' ...
                    'springs and a payload mass of %f' ], ...
                                             numberOfSprings, ...
                                             springThickness, ...
                                             springWidth, ...
                                             springLength, ...
                                             massPayload);
designTable.Properties.VariableUnits = {'', 'm', 'm/s', 'm', 'kg'};

display(designTable);
