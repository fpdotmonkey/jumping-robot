clear all;
gravity = 9.81;
airDensity = 1.225;

numberOfElements = 50;

springStiffness = 131e9;
springDensity = 1500;

massHinge = .020;

numberOfSprings = 4;
springWidth = .118 * .0254;%.0047752;
springThickness = .019 * .0254;%.0004826;

dragCoefficient = 1.2;
dragMassPerArea = 0.07609;  % styrofoam sheet, 4.75mm thick

desiredSpecificDrags = logspace(-2, 2, 5);

compressionRatio = 0.23;

SPRING_LENGTH = linspace(0.10, 1.00, 20);
DRAG_RADIUS = linspace(0.005, 0.205, 25);
MASS_PAYLOAD = 0.030;

[ DR, SL ] = meshgrid(DRAG_RADIUS, SPRING_LENGTH);

for i = 1:length(DR(:, 1))
    for j = 1:length(SL(1, :))
        dragArea = pi * DR(i, j)^2;
        massDrag = dragArea * dragMassPerArea;
        massSpring = springDensity * numberOfSprings * SL(i, j) ...
            * springWidth * springThickness;
        totalMass = MASS_PAYLOAD + massHinge + massSpring + ...
            massDrag;
        compressedSpringLength = compressionRatio * SL(i, j);
        
        
        springEnergy = jumperEnergy(SL(i, j), ...
                                    compressedSpringLength, ...
                                    springWidth, ...
                                    springThickness, ...
                                    numberOfSprings, ...
                                    numberOfElements, ...
                                    springStiffness);
        
        efficiency = jumperEfficiency(massHinge, ...
                                      numberOfSprings, ...
                                      massSpring / numberOfSprings, ...
                                      MASS_PAYLOAD, ...
                                      dragMassPerArea, ...
                                      dragArea);

        [ velocity(i, j), ~, ~ ] = jumperJumpHeight(gravity, ...
                                                    airDensity, ...
                                                    dragCoefficient, ...
                                                    dragArea, ...
                                                    efficiency, ...
                                                    numberOfSprings * ...
                                                     springEnergy, ...
                                                    totalMass);

        specificDrag(i, j) = ...
            (dragCoefficient * airDensity * dragArea * velocity(i, j)^2) ...
            / (totalMass * gravity);

    end
end

csvwrite('~/projects/Jumping Robots/velocity.csv', velocity)
csvwrite('~/projects/Jumping Robots/specificDrag.csv', specificDrag)

systemParameters = [ MASS_PAYLOAD, compressionRatio, ...
                    max(DRAG_RADIUS), min(DRAG_RADIUS), ...
                    max(SPRING_LENGTH), min(SPRING_LENGTH), numberOfSprings, ...
                    springWidth, springThickness, dragCoefficient, ...
                    dragMassPerArea, massHinge, springStiffness, ...
                    springDensity, gravity, airDensity ];

csvwrite('~/projects/Jumping Robots/systemParameters.csv', ...
         systemParameters);

csvwrite('~/projects/Jumping Robots/contours.csv', desiredSpecificDrags);


fprintf('\a');  % bell tone to indicate completion
