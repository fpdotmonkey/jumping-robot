getJumperDesign;

springLength = uncompressedLength;
springArea = springWidth * springThickness;
springMass = springDensity * numberOfSprings * springArea * springLength;

totalMass = payloadMass + dragMassPerArea * dragAreas + springMass;

efficiency = jumperEfficiency(hingeMass, numberOfSprings, ...
                              springMass / numberOfSprings, payloadMass);

velocity = zeros(length(specificDrags), 1);
velocity_LB = zeros(length(specificDrags), 1);
velocity_UB = zeros(length(specificDrags), 1);
jumpHeight = zeros(length(specificDrags), 1);

for i = 1:length(specificDrags)
    [ velocity(i), velocity_LB(i), velocity_UB(i) ] = ...
        velocityError(payloadMass, payloadMass*.01, ...
                      springLength, springLength*.01, ...
                      dragRadii(i), dragRadii(i)*.01, ...
                      specificDrags(i), dragMassPerArea, ...
                      springArea, springDensity, ...
                      dragCoefficient, airDensity, gravity);
    
    [ ~, ~, jumpHeight(i) ] = ...
    jumperJumpHeight(gravity, airDensity, dragCoefficient, ...
                     dragAreas(i), efficiency, ...
                     totalEnergy, totalMass(i));
    
end

designTable = table(specificDrags, dragRadii, velocity, jumpHeight)
designTable.Properties.Description = sprintf(['Design parameters for ' ...
                    'a bow jumper with %i %fx%fx%f carbon-fiber bow ' ...
                    'springs and a payload mass of %f'], ...
                                             numberOfSprings, ...
                                             springThickness, ...
                                             springWidth, ...
                                             springLength, ...
                                             payloadMass);

designTable.Properties.VariableUnits = {'', 'cm', 'm/s', 'm'};
